/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { FxERC20, FxERC20Interface } from "../FxERC20";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
    ],
    name: "allowance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "burn",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "connectedToken",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "subtractedValue",
        type: "uint256",
      },
    ],
    name: "decreaseAllowance",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "fxManager",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "addedValue",
        type: "uint256",
      },
    ],
    name: "increaseAllowance",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "fxManager_",
        type: "address",
      },
      {
        internalType: "address",
        name: "connectedToken_",
        type: "address",
      },
      {
        internalType: "string",
        name: "name_",
        type: "string",
      },
      {
        internalType: "string",
        name: "symbol_",
        type: "string",
      },
      {
        internalType: "uint8",
        name: "decimals_",
        type: "uint8",
      },
    ],
    name: "initialize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "mint",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "_name",
        type: "string",
      },
      {
        internalType: "string",
        name: "_symbol",
        type: "string",
      },
      {
        internalType: "uint8",
        name: "_decimals",
        type: "uint8",
      },
    ],
    name: "setupMetaData",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "recipient",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        internalType: "address",
        name: "recipient",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50611425806100206000396000f3fe608060405234801561001057600080fd5b506004361061011b5760003560e01c806370a08231116100b25780639dc29fac11610081578063a9059cbb11610066578063a9059cbb14610234578063af1e6be714610247578063dd62ed3e1461025a5761011b565b80639dc29fac1461020e578063a457c2d7146102215761011b565b806370a08231146101d85780638420ce99146101eb57806395d89b41146101fe5780639b779153146102065761011b565b806323b872dd116100ee57806323b872dd14610188578063313ce5671461019b57806339509351146101b057806340c10f19146101c35761011b565b806306fdde0314610120578063095ea7b31461013e5780630a8a49141461015e57806318160ddd14610173575b600080fd5b61012861026d565b6040516101359190610f44565b60405180910390f35b61015161014c366004610e7e565b6102ff565b6040516101359190610f39565b610166610315565b6040516101359190610f18565b61017b610331565b6040516101359190611262565b610151610196366004610e43565b610337565b6101a36103ad565b604051610135919061126b565b6101516101be366004610e7e565b6103b6565b6101d66101d1366004610e7e565b6103f9565b005b61017b6101e6366004610d64565b61044c565b6101d66101f9366004610db0565b610478565b610128610562565b610166610571565b6101d661021c366004610e7e565b610592565b61015161022f366004610e7e565b6105d8565b610151610242366004610e7e565b610634565b6101d6610255366004610ea7565b610641565b61017b610268366004610d7e565b61068d565b60606003805461027c906112a8565b80601f01602080910402602001604051908101604052809291908181526020018280546102a8906112a8565b80156102f55780601f106102ca576101008083540402835291602001916102f5565b820191906000526020600020905b8154815290600101906020018083116102d857829003601f168201915b5050505050905090565b600061030c3384846106c5565b50600192915050565b60065473ffffffffffffffffffffffffffffffffffffffff1690565b60025490565b60006103448484846107a0565b6103a3843361039e856040518060600160405280602881526020016113a36028913973ffffffffffffffffffffffffffffffffffffffff8a16600090815260016020908152604080832033845290915290205491906108f6565b6106c5565b5060019392505050565b60055460ff1690565b33600081815260016020908152604080832073ffffffffffffffffffffffffffffffffffffffff87168452909152812054909161030c91859061039e9086610930565b600554610100900473ffffffffffffffffffffffffffffffffffffffff16331461043e5760405162461bcd60e51b8152600401610435906110a6565b60405180910390fd5b6104488282610966565b5050565b73ffffffffffffffffffffffffffffffffffffffff81166000908152602081905260409020545b919050565b600554610100900473ffffffffffffffffffffffffffffffffffffffff161580156104b9575060065473ffffffffffffffffffffffffffffffffffffffff16155b6104d55760405162461bcd60e51b8152600401610435906110dd565b600580547fffffffffffffffffffffff0000000000000000000000000000000000000000ff1661010073ffffffffffffffffffffffffffffffffffffffff8881169190910291909117909155600680547fffffffffffffffffffffffff00000000000000000000000000000000000000001691861691909117905561055b838383610641565b5050505050565b60606004805461027c906112a8565b600554610100900473ffffffffffffffffffffffffffffffffffffffff1690565b600554610100900473ffffffffffffffffffffffffffffffffffffffff1633146105ce5760405162461bcd60e51b8152600401610435906110a6565b6104488282610a4d565b600061030c338461039e856040518060600160405280602581526020016113cb6025913933600090815260016020908152604080832073ffffffffffffffffffffffffffffffffffffffff8d16845290915290205491906108f6565b600061030c3384846107a0565b600554610100900473ffffffffffffffffffffffffffffffffffffffff16331461067d5760405162461bcd60e51b8152600401610435906110a6565b610688838383610b57565b505050565b73ffffffffffffffffffffffffffffffffffffffff918216600090815260016020908152604080832093909416825291909152205490565b73ffffffffffffffffffffffffffffffffffffffff83166106f85760405162461bcd60e51b8152600401610435906111ce565b73ffffffffffffffffffffffffffffffffffffffff821661072b5760405162461bcd60e51b815260040161043590611012565b73ffffffffffffffffffffffffffffffffffffffff80841660008181526001602090815260408083209487168084529490915290819020849055517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92590610793908590611262565b60405180910390a3505050565b73ffffffffffffffffffffffffffffffffffffffff83166107d35760405162461bcd60e51b815260040161043590611171565b73ffffffffffffffffffffffffffffffffffffffff82166108065760405162461bcd60e51b815260040161043590610fb5565b610811838383610688565b61085b8160405180606001604052806026815260200161137d6026913973ffffffffffffffffffffffffffffffffffffffff861660009081526020819052604090205491906108f6565b73ffffffffffffffffffffffffffffffffffffffff80851660009081526020819052604080822093909355908416815220546108979082610930565b73ffffffffffffffffffffffffffffffffffffffff80841660008181526020819052604090819020939093559151908516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90610793908590611262565b6000818484111561091a5760405162461bcd60e51b81526004016104359190610f44565b5060006109278486611291565b95945050505050565b60008061093d8385611279565b90508381101561095f5760405162461bcd60e51b81526004016104359061106f565b9392505050565b73ffffffffffffffffffffffffffffffffffffffff82166109995760405162461bcd60e51b81526004016104359061122b565b6109a560008383610688565b6002546109b29082610930565b60025573ffffffffffffffffffffffffffffffffffffffff82166000908152602081905260409020546109e59082610930565b73ffffffffffffffffffffffffffffffffffffffff83166000818152602081905260408082209390935591519091907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90610a41908590611262565b60405180910390a35050565b73ffffffffffffffffffffffffffffffffffffffff8216610a805760405162461bcd60e51b815260040161043590611114565b610a8c82600083610688565b610ad68160405180606001604052806022815260200161135b6022913973ffffffffffffffffffffffffffffffffffffffff851660009081526020819052604090205491906108f6565b73ffffffffffffffffffffffffffffffffffffffff8316600090815260208190526040902055600254610b099082610bb5565b60025560405160009073ffffffffffffffffffffffffffffffffffffffff8416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90610a41908590611262565b8251610b6a906003906020860190610bf7565b508151610b7e906004906020850190610bf7565b50600580547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660ff929092169190911790555050565b600061095f83836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f7700008152506108f6565b828054610c03906112a8565b90600052602060002090601f016020900481019282610c255760008555610c6b565b82601f10610c3e57805160ff1916838001178555610c6b565b82800160010185558215610c6b579182015b82811115610c6b578251825591602001919060010190610c50565b50610c77929150610c7b565b5090565b5b80821115610c775760008155600101610c7c565b803573ffffffffffffffffffffffffffffffffffffffff8116811461047357600080fd5b600082601f830112610cc4578081fd5b813567ffffffffffffffff80821115610cdf57610cdf61132b565b60405160207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8501168201018181108382111715610d2157610d2161132b565b604052828152848301602001861015610d38578384fd5b82602086016020830137918201602001929092529392505050565b803560ff8116811461047357600080fd5b600060208284031215610d75578081fd5b61095f82610c90565b60008060408385031215610d90578081fd5b610d9983610c90565b9150610da760208401610c90565b90509250929050565b600080600080600060a08688031215610dc7578081fd5b610dd086610c90565b9450610dde60208701610c90565b9350604086013567ffffffffffffffff80821115610dfa578283fd5b610e0689838a01610cb4565b94506060880135915080821115610e1b578283fd5b50610e2888828901610cb4565b925050610e3760808701610d53565b90509295509295909350565b600080600060608486031215610e57578283fd5b610e6084610c90565b9250610e6e60208501610c90565b9150604084013590509250925092565b60008060408385031215610e90578182fd5b610e9983610c90565b946020939093013593505050565b600080600060608486031215610ebb578283fd5b833567ffffffffffffffff80821115610ed2578485fd5b610ede87838801610cb4565b94506020860135915080821115610ef3578384fd5b50610f0086828701610cb4565b925050610f0f60408501610d53565b90509250925092565b73ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b901515815260200190565b6000602080835283518082850152825b81811015610f7057858101830151858201604001528201610f54565b81811115610f815783604083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016929092016040019392505050565b60208082526023908201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260408201527f6573730000000000000000000000000000000000000000000000000000000000606082015260800190565b60208082526022908201527f45524332303a20617070726f766520746f20746865207a65726f20616464726560408201527f7373000000000000000000000000000000000000000000000000000000000000606082015260800190565b6020808252601b908201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604082015260600190565b6020808252600e908201527f496e76616c69642073656e646572000000000000000000000000000000000000604082015260600190565b6020808252601c908201527f546f6b656e20697320616c726561647920696e697469616c697a656400000000604082015260600190565b60208082526021908201527f45524332303a206275726e2066726f6d20746865207a65726f2061646472657360408201527f7300000000000000000000000000000000000000000000000000000000000000606082015260800190565b60208082526025908201527f45524332303a207472616e736665722066726f6d20746865207a65726f20616460408201527f6472657373000000000000000000000000000000000000000000000000000000606082015260800190565b60208082526024908201527f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460408201527f7265737300000000000000000000000000000000000000000000000000000000606082015260800190565b6020808252601f908201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604082015260600190565b90815260200190565b60ff91909116815260200190565b6000821982111561128c5761128c6112fc565b500190565b6000828210156112a3576112a36112fc565b500390565b6002810460018216806112bc57607f821691505b602082108114156112f6577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fdfe45524332303a206275726e20616d6f756e7420657863656564732062616c616e636545524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e636545524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e636545524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726fa2646970667358221220edd4c2e9f143cc38db4487ed6d4c52de7b7fd26a75068d2edd7b9d3a4794f67f64736f6c63430008000033";

export class FxERC20__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<FxERC20> {
    return super.deploy(overrides || {}) as Promise<FxERC20>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): FxERC20 {
    return super.attach(address) as FxERC20;
  }
  connect(signer: Signer): FxERC20__factory {
    return super.connect(signer) as FxERC20__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): FxERC20Interface {
    return new utils.Interface(_abi) as FxERC20Interface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): FxERC20 {
    return new Contract(address, _abi, signerOrProvider) as FxERC20;
  }
}
