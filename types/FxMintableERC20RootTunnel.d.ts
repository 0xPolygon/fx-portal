/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface FxMintableERC20RootTunnelInterface extends ethers.utils.Interface {
  functions: {
    "DEPOSIT()": FunctionFragment;
    "SEND_MESSAGE_EVENT_SIG()": FunctionFragment;
    "checkpointManager()": FunctionFragment;
    "childTokenTemplateCodeHash()": FunctionFragment;
    "computedCreate2Address(bytes32,bytes32,address)": FunctionFragment;
    "deposit(address,address,uint256,bytes)": FunctionFragment;
    "fxChildTunnel()": FunctionFragment;
    "fxRoot()": FunctionFragment;
    "processedExits(bytes32)": FunctionFragment;
    "receiveMessage(bytes)": FunctionFragment;
    "rootToChildTokens(address)": FunctionFragment;
    "rootTokenTemplate()": FunctionFragment;
    "setFxChildTunnel(address)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "DEPOSIT", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "SEND_MESSAGE_EVENT_SIG",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "checkpointManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "childTokenTemplateCodeHash",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "computedCreate2Address",
    values: [BytesLike, BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [string, string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "fxChildTunnel",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "fxRoot", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "processedExits",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "receiveMessage",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "rootToChildTokens",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "rootTokenTemplate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setFxChildTunnel",
    values: [string]
  ): string;

  decodeFunctionResult(functionFragment: "DEPOSIT", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "SEND_MESSAGE_EVENT_SIG",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkpointManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "childTokenTemplateCodeHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "computedCreate2Address",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "fxChildTunnel",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "fxRoot", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "processedExits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "receiveMessage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rootToChildTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rootTokenTemplate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFxChildTunnel",
    data: BytesLike
  ): Result;

  events: {};
}

export class FxMintableERC20RootTunnel extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: FxMintableERC20RootTunnelInterface;

  functions: {
    DEPOSIT(overrides?: CallOverrides): Promise<[string]>;

    SEND_MESSAGE_EVENT_SIG(overrides?: CallOverrides): Promise<[string]>;

    checkpointManager(overrides?: CallOverrides): Promise<[string]>;

    childTokenTemplateCodeHash(overrides?: CallOverrides): Promise<[string]>;

    computedCreate2Address(
      salt: BytesLike,
      bytecodeHash: BytesLike,
      deployer: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    deposit(
      rootToken: string,
      user: string,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    fxChildTunnel(overrides?: CallOverrides): Promise<[string]>;

    fxRoot(overrides?: CallOverrides): Promise<[string]>;

    processedExits(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    receiveMessage(
      inputData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    rootToChildTokens(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    rootTokenTemplate(overrides?: CallOverrides): Promise<[string]>;

    setFxChildTunnel(
      _fxChildTunnel: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  DEPOSIT(overrides?: CallOverrides): Promise<string>;

  SEND_MESSAGE_EVENT_SIG(overrides?: CallOverrides): Promise<string>;

  checkpointManager(overrides?: CallOverrides): Promise<string>;

  childTokenTemplateCodeHash(overrides?: CallOverrides): Promise<string>;

  computedCreate2Address(
    salt: BytesLike,
    bytecodeHash: BytesLike,
    deployer: string,
    overrides?: CallOverrides
  ): Promise<string>;

  deposit(
    rootToken: string,
    user: string,
    amount: BigNumberish,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  fxChildTunnel(overrides?: CallOverrides): Promise<string>;

  fxRoot(overrides?: CallOverrides): Promise<string>;

  processedExits(arg0: BytesLike, overrides?: CallOverrides): Promise<boolean>;

  receiveMessage(
    inputData: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  rootToChildTokens(arg0: string, overrides?: CallOverrides): Promise<string>;

  rootTokenTemplate(overrides?: CallOverrides): Promise<string>;

  setFxChildTunnel(
    _fxChildTunnel: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    DEPOSIT(overrides?: CallOverrides): Promise<string>;

    SEND_MESSAGE_EVENT_SIG(overrides?: CallOverrides): Promise<string>;

    checkpointManager(overrides?: CallOverrides): Promise<string>;

    childTokenTemplateCodeHash(overrides?: CallOverrides): Promise<string>;

    computedCreate2Address(
      salt: BytesLike,
      bytecodeHash: BytesLike,
      deployer: string,
      overrides?: CallOverrides
    ): Promise<string>;

    deposit(
      rootToken: string,
      user: string,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    fxChildTunnel(overrides?: CallOverrides): Promise<string>;

    fxRoot(overrides?: CallOverrides): Promise<string>;

    processedExits(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    receiveMessage(
      inputData: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    rootToChildTokens(arg0: string, overrides?: CallOverrides): Promise<string>;

    rootTokenTemplate(overrides?: CallOverrides): Promise<string>;

    setFxChildTunnel(
      _fxChildTunnel: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    DEPOSIT(overrides?: CallOverrides): Promise<BigNumber>;

    SEND_MESSAGE_EVENT_SIG(overrides?: CallOverrides): Promise<BigNumber>;

    checkpointManager(overrides?: CallOverrides): Promise<BigNumber>;

    childTokenTemplateCodeHash(overrides?: CallOverrides): Promise<BigNumber>;

    computedCreate2Address(
      salt: BytesLike,
      bytecodeHash: BytesLike,
      deployer: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    deposit(
      rootToken: string,
      user: string,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    fxChildTunnel(overrides?: CallOverrides): Promise<BigNumber>;

    fxRoot(overrides?: CallOverrides): Promise<BigNumber>;

    processedExits(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    receiveMessage(
      inputData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    rootToChildTokens(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rootTokenTemplate(overrides?: CallOverrides): Promise<BigNumber>;

    setFxChildTunnel(
      _fxChildTunnel: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DEPOSIT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    SEND_MESSAGE_EVENT_SIG(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    checkpointManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    childTokenTemplateCodeHash(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    computedCreate2Address(
      salt: BytesLike,
      bytecodeHash: BytesLike,
      deployer: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    deposit(
      rootToken: string,
      user: string,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    fxChildTunnel(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    fxRoot(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    processedExits(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    receiveMessage(
      inputData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    rootToChildTokens(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rootTokenTemplate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setFxChildTunnel(
      _fxChildTunnel: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
